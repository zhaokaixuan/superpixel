!function(t){var e={};function i(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)i.d(n,a,function(e){return t[e]}.bind(null,a));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,n){"use strict";function a(t,e){e=e||{},this.canvas=document.createElement("canvas"),this.canvas.width=e.width||this.canvas.width,this.canvas.height=e.height||this.canvas.height,t&&("string"==typeof t||"object"==typeof t&&"IMG"===t.nodeName?this.load(t,e):"object"==typeof t&&("CANVAS"===t.nodeName||t instanceof ImageData)&&this.fromCanvas(t,e))}function o(t,e){return document.createElement("canvas").getContext("2d").createImageData(t,e)}function r(t,e){if(!(t instanceof ImageData))throw"Invalid ImageData";this.imageData=o(t.width,t.height),this.imageData.data.set(t.data)}function s(t,e){r.call(this,t,e),e=e||{},this.sigma=e.sigma||Math.sqrt(2),this.threshold=e.threshold||500,this.minSize=e.minSize||20,this.result=this._compute()}function h(t,e){for(var i=e;i!==t.p[i];)i=t.p[i];return t.p[e]=i,i}function l(t,e,i){t.rank[e]>t.rank[i]?(t.p[i]=e,t.size[e]+=t.size[i]):(t.p[e]=i,t.size[i]+=t.size[e],t.rank[e]==t.rank[i]&&t.rank[i]++),t.nodes--}function d(t,e){r.call(this,t,e),e=e||{},this.regionSize=e.regionSize||16,this.minRegionSize=e.minRegionSize||Math.round(.8*this.regionSize),this.maxIterations=e.maxIterations||10,this._compute()}function c(t,e,i,n,a,o,r){for(var s,h=0;h<r;h++)for(var l=0;l<o;l++)i[s=e[l+h*o]]++,n[5*s+0]+=l,n[5*s+1]+=h,n[5*s+2]+=t[h*o+l],n[5*s+3]+=t[o*r+h*o+l],n[5*s+4]+=t[2*o*r+h*o+l];for(s=0;s<a;s++){var d=1/Math.max(i[s],1e-8);n[5*s]=n[5*s]*d,n[5*s+1]=n[5*s+1]*d,n[5*s+2]=n[5*s+2]*d,n[5*s+3]=n[5*s+3]*d,n[5*s+4]=n[5*s+4]*d}}function p(t,e,i,n){for(var a=new Float32Array(n.length/2),o=new Float32Array(n.length/2),r=0;r<t.length;r++){var s=t[r];a[s]<e[s]&&(a[s]=e[s],n[2*s+0]=e[s]),o[s]<i[s]&&(o[s]=i[s],n[2*s+1]=i[s])}}function u(t,e,i,n,a,o,r,s,h,l,d,c){for(var p,u,m=0;m<a.length;++m)a[m]=1/0;for(var g=l,f=0;f<s*h;++f){var v=Math.round(o[5*f+0]),y=Math.round(o[5*f+1]);for(u=Math.max(0,y-g);u<Math.min(c,y+g);++u)for(p=Math.max(0,v-g);p<Math.min(d,v+g);++p){var b=(p-v)*(p-v)+(u-y)*(u-y),w=t[u*d+p]-o[5*f+2],x=t[d*c+u*d+p]-o[5*f+3],C=t[2*d*c+u*d+p]-o[5*f+4],M=w*w+x*x+C*C,L=Math.sqrt(M/r[2*f+0]+b/r[2*f+1]);L<a[u*d+p]&&(a[u*d+p]=L,e[u*d+p]=f)}}for(u=0;u<c;++u)for(p=0;p<d;++p)r[2*e[u*d+p]]<i[u*d+p]&&(r[2*e[u*d+p]]=i[u*d+p]),r[2*e[u*d+p]+1]<n[u*d+p]&&(r[2*e[u*d+p]+1]=n[u*d+p])}function m(t,e){for(var i=0,n=0;n<t.length;++n){var a=t[n]-e[n];i+=Math.sqrt(a*a)}return i}function g(t,e){r.call(this,t,e),this.width=this.imageData.width,this.height=this.imageData.height,e=e||{},this.method=e.method||"FixedK",this.perturb=void 0===e.perturb||e.perturb,this.maxIterations=e.maxIterations||10,this.K=e.K||1024,this.step=e.step||200,this.enforceConnectivity=!1!==e.enforceConnectivity,this._compute()}function f(t,e){for(var i=0;i<t.length;++i)t[i]=e;return t}n.r(e),a.prototype.load=function(t,e){"function"==typeof(e=e||{})&&(e={onload:e});var i,n=this;return this.canvas.width=e.width||this.canvas.width,this.canvas.height=e.height||this.canvas.height,"string"==typeof t?((i=new Image).crossOrigin="",i.src=t):i=t,i.onload=function(){var t={width:document.documentElement.clientWidth-200,height:document.documentElement.clientHeight-140},a=i.height/i.width;a>=1?i.height>=t.height&&(i.height=t.height,i.width=i.height/a):i.width>t.width&&(i.width=t.width,i.height=i.width*a),n._onImageLoad(i,e)},"function"==typeof e.onerror&&(i.onerror=e.onerror.call(this)),this},a.prototype._onImageLoad=function(t,e){this.canvas.width=e.width||t.width,this.canvas.height=e.height||t.height;var i=this.canvas.getContext("2d");this._setImageSmoothing(i,e),i.drawImage(t,0,0,t.width,t.height,0,0,this.canvas.width,this.canvas.height),this.imageData=i.getImageData(0,0,this.canvas.width,this.canvas.height),"function"==typeof e.onload&&e.onload.call(this)},a.prototype.fromCanvas=function(t,e){"function"==typeof(e=e||{})&&(e={onload:e}),this.canvas.width=t.width,this.canvas.height=t.height;var i=this.canvas.getContext("2d");return this._setImageSmoothing(i,e),t instanceof ImageData?i.putImageData(t,0,0):i.drawImage(t,0,0,this.canvas.width,this.canvas.height),this.imageData=i.getImageData(0,0,this.canvas.width,this.canvas.height),"function"==typeof e.onload&&e.onload.call(this),this},a.prototype.fromImageData=function(t,e){"function"==typeof(e=e||{})&&(e={onload:e}),this.canvas.width=t.width,this.canvas.height=t.height;var i=this.canvas.getContext("2d");return this._setImageSmoothing(i,e),i.drawImage(t,0,0,this.canvas.width,this.canvas.height),this.imageData=i.getImageData(0,0,this.canvas.width,this.canvas.height),"function"==typeof e.onload&&e.onload.call(this),this},a.prototype._setImageSmoothing=function(t,e){void 0===e.imageSmoothingEnabled&&(e.imageSmoothingEnabled=!0),t.mozImageSmoothingEnabled=e.imageSmoothingEnabled,t.webkitImageSmoothingEnabled=e.imageSmoothingEnabled,t.msImageSmoothingEnabled=e.imageSmoothingEnabled,t.imageSmoothingEnabled=e.imageSmoothingEnabled},a.prototype.copy=function(t){return t.render(),this.fromCanvas(t.canvas),this},a.prototype.process=function(t){if("function"!=typeof t)throw"Invalid callback";return t.call(this,this.imageData),this.render()},a.prototype.render=function(){return this.imageData&&this.canvas.getContext("2d").putImageData(this.imageData,0,0),this},a.prototype.setAlpha=function(t){for(var e=this.imageData.data,i=3;i<e.length;i+=4)e[i]=t;return this},a.prototype.fill=function(t){for(var e=this.imageData.data,i=0;i<e.length;i+=4)for(var n=0;n<t.length;++n)e[i+n]=t[n];return this},a.prototype.resize=function(t,e,i){i=i||{};var n=document.createElement("canvas"),a=n.getContext("2d");n.width=t,n.height=e,a.drawImage(this.canvas,0,0,t,e),this.canvas.width=t,this.canvas.height=e;var o=this.canvas.getContext("2d");return this._setImageSmoothing(o,i),o.drawImage(n,0,0),this.imageData=o.getImageData(0,0,t,e),this},a.prototype.applyColormap=function(t,e){var i=this.imageData.data;void 0===e&&(e=!0);for(var n=0;n<i.length;n+=4){var a=i[n];e||(a|=i[n+1]<<8|i[n+2]<<16),t[a]&&(i[n+0]=t[a][0],i[n+1]=t[a][1],i[n+2]=t[a][2])}return this},a.prototype.computeEdgemap=function(t){void 0===t&&(t={});var e,i,n,a=this.imageData.data,o=this.imageData.width,r=this.imageData.height,s=new Uint8Array(this.imageData.data),h=t.foreground||[255,255,255],l=t.background||[0,0,0];for(e=0;e<r;++e)for(i=0;i<o;++i){var d=4*(e*o+i),c=a[4*(e*o+i)];if(0===e||0===i||e===r-1||i===o-1||c!==a[4*(e*o+i-1)]||c!==a[4*(e*o+i+1)]||c!==a[4*((e-1)*o+i)]||c!==a[4*((e+1)*o+i)])for(n=0;n<h.length;++n)s[d+n]=h[n];else for(n=0;n<l.length;++n)s[d+n]=l[n]}return a.set(s),this},a.prototype.gray2index=function(){for(var t=this.imageData.data,e=0;e<t.length;e+=4)t[e+1]=0,t[e+2]=0;return this},r.prototype.finer=function(){},r.prototype.coarser=function(){},s.prototype=Object.create(r.prototype),s.prototype._compute=function(){var t,e,i,n=o(this.imageData.width,this.imageData.height);n.data.set(this.imageData.data),t=n,e=this.sigma,i=function(t){t=Math.max(t,.01);var e,i=Math.ceil(4*t)+1,n=new Float32Array(i),a=0;for(e=0;e<i;++e){var o=Math.exp(-.5*Math.pow(e/t,2));a+=Math.abs(o),n[e]=o}for(a=2*a-Math.abs(n[0]),e=0;e<i;++e)n[e]/=a;return n}(e),function(t,e){var i,n,a,o,r,s=t.width,h=t.height,l=t.data,d=new Float32Array(l);for(i=0;i<h;++i)for(n=0;n<s;++n)for(a=0;a<3;++a){for(r=e[0]*l[4*(i*s+n)+a],o=1;o<e.length;++o)r+=e[o]*(l[4*(i*s+Math.max(n-o,0))+a]+l[4*(i*s+Math.min(n+o,s-1))+a]);d[4*(i*s+n)+a]=r}for(i=0;i<h;++i)for(n=0;n<s;++n)for(a=0;a<3;++a){for(r=e[0]*d[4*(i*s+n)+a],o=1;o<e.length;++o)r+=e[o]*(d[4*(Math.max(i-o,0)*s+n)+a]+d[4*(Math.min(i+o,h-1)*s+n)+a]);l[4*(i*s+n)+a]=r}}(t,i);var a=function(t,e,i){var n,a,o,r=function(t){for(var e,i,n=t.width,a=t.height,o=t.data,r=4*n*a-3*n-3*a+2,s=0,h={a:new Int32Array(r),b:new Int32Array(r),w:new Float32Array(r)},l=0;l<a;++l)for(var d=0;d<n;++d)d<n-1&&(e=l*n+d,i=l*n+d+1,h.a[s]=e,h.b[s]=i,e*=4,i*=4,h.w[s]=Math.sqrt(Math.pow(o[e+0]-o[i+0],2)+Math.pow(o[e+1]-o[i+1],2)+Math.pow(o[e+2]-o[i+2],2)),++s),l<a-1&&(e=l*n+d,i=(l+1)*n+d,h.a[s]=e,h.b[s]=i,e*=4,i*=4,h.w[s]=Math.sqrt(Math.pow(o[e+0]-o[i+0],2)+Math.pow(o[e+1]-o[i+1],2)+Math.pow(o[e+2]-o[i+2],2)),++s),d<n-1&&l<a-1&&(e=l*n+d,i=(l+1)*n+d+1,h.a[s]=e,h.b[s]=i,e*=4,i*=4,h.w[s]=Math.sqrt(Math.pow(o[e+0]-o[i+0],2)+Math.pow(o[e+1]-o[i+1],2)+Math.pow(o[e+2]-o[i+2],2)),++s),d<n-1&&l>0&&(e=l*n+d,i=(l-1)*n+d+1,h.a[s]=e,h.b[s]=i,e*=4,i*=4,h.w[s]=Math.sqrt(Math.pow(o[e+0]-o[i+0],2)+Math.pow(o[e+1]-o[i+1],2)+Math.pow(o[e+2]-o[i+2],2)),++s);return h}(t);!function(t){var e,i=new Array(t.w.length);for(e=0;e<i.length;++e)i[e]=e;var n=t.a,a=t.b,o=t.w;i.sort(function(t,e){return o[t]-o[e]});var r=new Uint32Array(n),s=new Uint32Array(a),h=new Float32Array(o);for(e=0;e<i.length;++e)r[e]=n[i[e]],s[e]=a[i[e]],h[e]=o[i[e]];t.a=r,t.b=s,t.w=h}(r);var s=function(t,e){for(var i={nodes:t,rank:new Int32Array(t),p:new Int32Array(t),size:new Int32Array(t),threshold:new Float32Array(t)},n=0;n<t;++n)i.size[n]=1,i.p[n]=n,i.threshold[n]=e;return i}(t.width*t.height,e);for(o=0;o<r.a.length;++o)n=h(s,r.a[o]),a=h(s,r.b[o]),n!=a&&r.w[o]<=s.threshold[n]&&r.w[o]<=s.threshold[a]&&(l(s,n,a),n=h(s,n),s.threshold[n]=r.w[o]+e/s.size[n]);for(o=0;o<r.a.length;++o)n=h(s,r.a[o]),a=h(s,r.b[o]),n!=a&&(s.size[n]<i||s.size[a]<i)&&l(s,n,a);return s}(n,this.threshold,this.minSize),r=function(t,e){for(var i=e.width,n=e.height,a=new Int32Array(i*n),o=[],r=0,s=0;s<n;++s)for(var l=0;l<i;++l){var d=h(t,s*i+l),c=o[d];void 0===c&&(c=r,o[d]=r++),a[s*i+l]=c}return a}(a,n),s=o(n.width,n.height);return function(t,e){for(var i=0;i<t.length;++i){var n=t[i];e[4*i+0]=255&n,e[4*i+1]=n>>>8&255,e[4*i+2]=n>>>16&255,e[4*i+3]=255}}(r,s.data),s.numSegments=a.nodes,s},s.prototype.finer=function(t){this.sigma/=t||Math.sqrt(2),this.threshold/=t||Math.sqrt(2),this.result=this._compute()},s.prototype.coarser=function(t){this.sigma*=t||Math.sqrt(2),this.threshold*=t||Math.sqrt(2),this.result=this._compute()},d.prototype=Object.create(r.prototype),d.prototype.finer=function(){var t=Math.max(5,Math.round(this.regionSize/Math.sqrt(2)));t!==this.regionSize&&(this.regionSize=t,this.minRegionSize=Math.round(.8*t),this._compute())},d.prototype.coarser=function(){var t=Math.min(640,Math.round(this.regionSize*Math.sqrt(2)));t!==this.regionSize&&(this.regionSize=t,this.minRegionSize=Math.round(.8*t),this._compute())},d.prototype._compute=function(){this.result=function(t,e,i,n){var a,r=t.width,s=t.height,h=Math.floor(r/e),l=Math.floor(s/e),d=Math.floor(h*l),g=Math.floor(r*s),f=new Float32Array(g),v=new Array(g),y=new Float32Array(5*d),b=new Float32Array(5*d),w=new Float32Array(2*d),x=new Float32Array(g),C=new Float32Array(g),M=new Float32Array(g),L=function(t,e,i){function n(t){return t>.00856?Math.pow(t,.33333333):7.78706891568*t+.1379310336}for(var a=new Float32Array(3*e*i),o=0;o<e*i;o++){var r=n(1*t[o]),s=n(1*t[e*i+o]),h=n(.9999999999999996*t[2*e*i+o]);a[o]=116*s-16,a[o+e*i]=500*(r-s),a[o+2*e*i]=200*(s-h)}return a}(function(t,e,i){for(var n=new Float32Array(3*e*i),a=0;a<e*i;a++){var o=.00392156862*t[4*a+0],r=.00392156862*t[4*a+1],s=.00392156862*t[4*a+2];o=Math.pow(o,2.2),r=Math.pow(r,2.2),s=Math.pow(s,2.2),n[a]=.488718*o+.31068*r+.200602*s,n[a+e*i]=.176204*o+.812985*r+.0108109*s,n[a+2*e*i]=.0102048*r+.989795*s}return n}(t.data,r,s),r,s);(function(t,e,i,n){for(var a=0;a<3;a++)for(var o=1;o<n-1;o++)for(var r=1;r<i-1;r++){var s=t[a*i*n+o*i+r-1],h=t[a*i*n+o*i+r+1],l=t[a*i*n+(o+1)*i+r],d=t[a*i*n+(o-1)*i+r];e[o*i+r]+=Math.pow(s-h,2)+Math.pow(l-d,2)}})(L,f,r,s),function(t,e,i,n,a,o,r,s,h){for(var l,d,c=0,p=0,u=0;u<o;u++)for(var m=0;m<a;m++){var g,f,v=0,y=0,b=1/0;for(l=parseInt(Math.round(r*(m+.5)),10),d=parseInt(Math.round(r*(u+.5)),10),l=Math.max(Math.min(l,s-1),0),d=Math.max(Math.min(d,h-1),0),f=Math.max(0,d-1);f<=Math.min(h-1,d+1);++f)for(g=Math.max(0,l-1);g<=Math.min(s-1,l+1);++g){var w=e[f*s+g];w<b&&(b=w,v=g,y=f)}i[c++]=parseFloat(v),i[c++]=parseFloat(y),i[c++]=t[y*s+v],i[c++]=t[s*h+y*s+v],i[c++]=t[2*s*h+y*s+v],n[p++]=100,n[p++]=r*r}}(L,f,y,w,h,l,e,r,s);for(var A=new Int32Array(g),E=0;E<n;++E){for(u(L,A,x,C,M,y,w,h,l,e,r,s),p(A,x,C,w),a=0;a<v.length;++a)v[a]=0;for(a=0;a<b.length;++a)b[a]=0;c(L,A,v,b,d,r,s);var S=m(y,b);if(S<1e-5)break;for(a=0;a<y.length;++a)y[a]=b[a]}!function(t,e,i,n,a){var o,r,s,h,l,d,c,p,u,m,g,f=new Int32Array(i),v=new Int32Array(i),y=new Array(1,-1,0,0),b=new Array(0,0,1,-1);for(l=0;l<i;++l)if(!f[l]){for(r=t[l],h=0,o=0,v[o++]=l,s=r+1,f[l]=r+1,d=l%n,c=Math.floor(l/n),g=0;g<4;g++)p=d+y[g],u=c+b[g],m=p+u*n,0<=p&&p<n&&0<=u&&u<a&&f[m]&&(s=f[m]);for(;h<o;){var w=v[h++];for(d=w%n,c=Math.floor(w/n),g=0;g<4;++g)p=d+y[g],u=c+b[g],m=p+u*n,0<=p&&p<n&&0<=u&&u<a&&0===f[m]&&t[m]===r&&(f[m]=r+1,v[o++]=m)}if(o<e)for(;o>0;)f[v[--o]]=s}for(l=0;l<i;++l)--f[l];for(var x=0;x<i;++x)t[x]=f[x]}(A,i,g,r,s);var I=o(r,s);return I.numSegments=function(t){for(var e={},i=0,n=0;n<t.length;++n){var a=t[n];void 0===e[a]&&(e[a]=i++),t[n]=e[a]}return i}(A),function(t,e){for(var i=0;i<t.length;++i){var n=Math.floor(t[i]);e[4*i+0]=255&n,e[4*i+1]=n>>>8&255,e[4*i+2]=n>>>16&255,e[4*i+3]=255}}(A,I.data),I}(this.imageData,this.regionSize,this.minRegionSize,this.maxIterations)},g.prototype=Object.create(r.prototype),g.prototype.finer=function(){var t=Math.min(8962,Math.round(2*this.K));t!==this.K&&(this.K=t,this._compute())},g.prototype.coarser=function(){var t=Math.max(16,Math.round(this.K/2));t!==this.K&&(this.K=t,this._compute())},g.prototype._compute=function(){var t="FixedK"===this.method?this.performSLICOForGivenK():this.performSLICOForGivenStepSize(),e=new ImageData(this.width,this.height);e.numSegments=function(t){for(var e={},i=0,n=0;n<t.length;++n){var a=t[n];void 0===e[a]&&(e[a]=i++),t[n]=e[a]}return i}(t),function(t,e){for(var i=0;i<t.length;++i){var n=t[i];e[4*i+0]=255&n,e[4*i+1]=255&n>>8,e[4*i+2]=255&n>>16,e[4*i+3]=255}}(t,e.data),this.result=e},g.prototype.rgb2xyz=function(t){var e=parseInt(t[0],10)/255,i=parseInt(t[1],10)/255,n=parseInt(t[2],10)/255,a=e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4),o=i<=.04045?i/12.92:Math.pow((e+.055)/1.055,2.4),r=n<=.04045?n/12.92:Math.pow((e+.055)/1.055,2.4);return[.4124564*a+.3575761*o+.1804375*r,.2126729*a+.7151522*o+.072175*r,.0193339*a+.119192*o+.9503041*r]},g.prototype.rgb2lab=function(t){var e=this.rgb2xyz(t),i=e[0]/.950456,n=e[1]/1,a=e[2]/1.088754,o=i>.008856?Math.pow(i,1/3):(903.3*i+16)/116,r=n>.008856?Math.pow(n,1/3):(903.3*n+16)/116;return[116*r-16,500*(o-r),200*(r-(a>.008856?Math.pow(a,1/3):(903.3*a+16)/116))]},g.prototype.doRGBtoLABConversion=function(t){var e=this.width*this.height,i=t.data;this.lvec=new Float64Array(e),this.avec=new Float64Array(e),this.bvec=new Float64Array(e);for(var n=0;n<e;++n){var a=i[4*n+0],o=i[4*n+1],r=i[4*n+2],s=this.rgb2lab([a,o,r]);this.lvec[n]=s[0],this.avec[n]=s[1],this.bvec[n]=s[2]}},g.prototype.detectLabEdges=function(){var t=this.width;this.edges=f(new Float64Array(this.width*this.height),0);for(var e=1;e<this.height-1;++e)for(var i=1;i<this.width-1;++i){var n=parseInt(e*this.width+i,10),a=Math.pow(this.lvec[n-1]-this.lvec[n+1],2)+Math.pow(this.avec[n-1]-this.avec[n+1],2)+Math.pow(this.bvec[n-1]-this.bvec[n+1],2),o=Math.pow(this.lvec[n-t]-this.lvec[n+t],2)+Math.pow(this.avec[n-t]-this.avec[n+t],2)+Math.pow(this.bvec[n-t]-this.bvec[n+t],2);this.edges[n]=a+o}},g.prototype.perturbSeeds=function(){for(var t=[-1,-1,0,1,1,1,0,-1],e=[0,-1,-1,-1,0,1,1,1],i=this.kSeedsL.length,n=0;n<i;++n){for(var a=parseInt(this.kSeedsX[n],10),o=parseInt(this.kSeedsY[n],10),r=parseInt(o*this.width+a,10),s=parseInt(r,10),h=0;h<8;++h){var l=parseInt(a+t[h],10),d=parseInt(o+e[h],10);if(l>=0&&l<this.width&&d>=0&&d<this.height){var c=parseInt(d*this.width+l,10);this.edges[c]<this.edges[s]&&(s=c)}}s!=r&&(this.kSeedsX[n]=Math.floor(s%this.width),this.kSeedsY[n]=Math.floor(s/this.width),this.kSeedsL[n]=this.lvec[s],this.kSeedsA[n]=this.avec[s],this.kSeedsB[n]=this.bvec[s])}},g.prototype.getLABXYSeedsForGivenStepSize=function(t,e){var i=0,n=Math.round(.5+parseFloat(this.width)/parseFloat(t)),a=Math.round(.5+parseFloat(this.height)/parseFloat(t)),o=Math.round(this.width-t*n),r=Math.round(this.height-t*a),s=parseFloat(o)/parseFloat(n),h=parseFloat(r)/parseFloat(a),l=Math.floor(t/2),d=Math.floor(t/2),c=n*a;this.kSeedsL=new Float64Array(c),this.kSeedsA=new Float64Array(c),this.kSeedsB=new Float64Array(c),this.kSeedsX=new Float64Array(c),this.kSeedsY=new Float64Array(c);for(var p=0;p<a;++p)for(var u=Math.floor(p*h),m=0;m<n;++m){var g=Math.floor(m*s),f=Math.floor((p*t+d+u)*this.width+(m*t+l+g));this.kSeedsL[i]=this.lvec[f],this.kSeedsA[i]=this.avec[f],this.kSeedsB[i]=this.bvec[f],this.kSeedsX[i]=m*t+l+g,this.kSeedsY[i]=p*t+d+u,++i}e&&this.perturbSeeds()},g.prototype.getLABXYSeedsForGivenK=function(t,e){var i=Math.floor(this.width*this.height),n=Math.sqrt(parseFloat(i)/parseFloat(t)),a=Math.round(n/2),o=Math.round(n/2),r=0;this.kSeedsL=[],this.kSeedsA=[],this.kSeedsB=[],this.kSeedsX=[],this.kSeedsY=[];for(var s=0;s<this.height;++s){var h=Math.floor(s*n+o);if(h>this.height-1)break;for(var l=0;l<this.width;++l){var d=Math.floor(l*n+(a<<(1&r)));if(d>this.width-1)break;var c=Math.floor(h*this.width+d);this.kSeedsL.push(this.lvec[c]),this.kSeedsA.push(this.avec[c]),this.kSeedsB.push(this.bvec[c]),this.kSeedsX.push(d),this.kSeedsY.push(h),0}++r}e&&this.perturbSeeds()},g.prototype.performSuperpixelSegmentationVariableSandM=function(t,e,i){for(var n,a,o,r,s,h,l=Math.floor(this.width*this.height),d=this.kSeedsL.length,c=0,p=Math.floor(e<10?1.5*e:e),u=f(new Float64Array(d),0),m=f(new Float64Array(d),0),g=f(new Float64Array(d),0),v=f(new Float64Array(d),0),y=f(new Float64Array(d),0),b=f(new Int32Array(d),0),w=f(new Float64Array(l),1/0),x=f(new Float64Array(l),1/0),C=f(new Float64Array(l),1/0),M=f(new Float64Array(d),Math.pow(10,2)),L=f(new Float64Array(d),Math.pow(e,2));c<i;){for(++c,f(C,1/0),r=0;r<d;++r){var A=Math.floor(Math.max(0,this.kSeedsY[r]-p)),E=Math.floor(Math.min(this.height,this.kSeedsY[r]+p)),S=Math.floor(Math.max(0,this.kSeedsX[r]-p)),I=Math.floor(Math.min(this.width,this.kSeedsX[r]+p));for(h=A;h<E;++h)for(s=S;s<I;++s){if(n=Math.floor(h*this.width+s),!(h<this.height&&s<this.width&&h>=0&&s>=0))throw"Assertion error";var k=this.lvec[n],_=this.avec[n],z=this.bvec[n];x[n]=Math.pow(k-this.kSeedsL[r],2)+Math.pow(_-this.kSeedsA[r],2)+Math.pow(z-this.kSeedsB[r],2),w[n]=Math.pow(s-this.kSeedsX[r],2)+Math.pow(h-this.kSeedsY[r],2);var N=x[n]/M[r]+w[n]/L[r];N<C[n]&&(C[n]=N,t[n]=r)}}for(0===c&&(f(M,1),f(L,1)),n=0;n<l;++n)M[t[n]]<x[n]&&(M[t[n]]=x[n]),L[t[n]]<w[n]&&(L[t[n]]=w[n]);for(f(u,0),f(m,0),f(g,0),f(v,0),f(y,0),f(b,0),a=0;a<l;++a){var D=t[a];if(D<0)throw"Assertion error";u[D]+=this.lvec[a],m[D]+=this.avec[a],g[D]+=this.bvec[a],v[D]+=a%this.width,y[D]+=a/this.width,b[D]++}for(o=0;o<d;++o){b[o]<=0&&(b[o]=1);var B=1/b[o];this.kSeedsL[o]=u[o]*B,this.kSeedsA[o]=m[o]*B,this.kSeedsB[o]=g[o]*B,this.kSeedsX[o]=v[o]*B,this.kSeedsY[o]=y[o]*B}}},g.prototype.enforceLabelConnectivity=function(t,e,i){for(var n,a,o,r,s,h=[-1,0,1,0],l=[0,-1,0,1],d=this.width*this.height,c=Math.floor(d/i),p=0,u=new Int32Array(d),m=new Int32Array(d),g=0,f=0,v=0;v<this.height;++v)for(var y=0;y<this.width;++y){if(e[g]<0){for(e[g]=p,u[0]=y,m[0]=v,a=0;a<4;++a)o=Math.floor(u[0]+h[a]),r=Math.floor(m[0]+l[a]),o>=0&&o<this.width&&r>=0&&r<this.height&&e[s=Math.floor(r*this.width+o)]>=0&&(f=e[s]);var b=1;for(n=0;n<b;++n)for(a=0;a<4;++a)o=Math.floor(u[n]+h[a]),r=Math.floor(m[n]+l[a]),o>=0&&o<this.width&&r>=0&&r<this.height&&e[s=Math.floor(r*this.width+o)]<0&&t[g]==t[s]&&(u[b]=o,m[b]=r,e[s]=p,++b);if(b<=c>>2){for(n=0;n<b;n++){e[Math.floor(m[n]*this.width+u[n])]=f}--p}++p}++g}return p},g.prototype.performSLICOForGivenStepSize=function(){var t=this.width*this.height,e=f(new Int32Array(t),-1);this.doRGBtoLABConversion(this.imageData),this.perturb&&this.detectLabEdges(),this.getLABXYSeedsForGivenStepSize(this.step,this.perturb),this.performSuperpixelSegmentationVariableSandM(e,this.step,this.maxIterations);e.length;if(this.enforceConnectivity){var i=f(new Int32Array(t),-1);this.enforceLabelConnectivity(e,i,t/(this.step*this.estep));for(var n=0;n<t;++n)e[n]=i[n]}return e},g.prototype.performSLICOForGivenK=function(){var t=this.width*this.height,e=f(new Int32Array(t),-1);this.doRGBtoLABConversion(this.imageData),this.perturb&&this.detectLabEdges(),this.getLABXYSeedsForGivenK(this.K,this.perturb);var i=Math.sqrt(t/this.K)+2;this.performSuperpixelSegmentationVariableSandM(e,i,this.maxIterations);e.length;if(this.enforceConnectivity){var n=f(new Int32Array(t),-1);this.enforceLabelConnectivity(e,n,this.K);for(var a=0;a<t;++a)e[a]=n[a]}return e},g.prototype.drawContoursAroundSegments=function(t){for(var e=new ImageData(this.width,this.height),i=f(e.data,255),n=[255,0,0],a=[-1,-1,0,1,1,1,0,-1],o=[0,-1,-1,-1,0,1,1,1],r=f(new Uint8Array(this.width*this.height),0),s=0,h=0;h<this.height;++h)for(var l=0;l<this.width;++l){for(var d=0,c=0;c<8;++c){var p=l+a[c],u=h+o[c];if(p>=0&&p<this.width&&u>=0&&u<this.height){var m=u*this.width+p;0===r[m]&&t.labels[s]!==t.labels[m]&&++d}}d>1&&(i[4*s+0]=n[0],i[4*s+1]=n[1],i[4*s+2]=n[2]),++s}return e};var v={pff:s,slic:d,slico:g};function y(t,e,i){this.neighbors=i||[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]],this.maps=[];for(var n=0;n<this.neighbors.length;++n){for(var a=this.neighbors[n][0],o=this.neighbors[n][1],r=new Int32Array(t*e),s=0;s<e;++s)for(var h=0;h<t;++h){var l=s+a,d=h+o;r[s*t+h]=l<0||e<=l||d<0||t<=d?-1:l*t+d}this.maps.push(r)}}function b(t,e){var i,n,a={};for(i=0;i<e.length;++i)a[n=t[e[i]]]?++a[n]:a[n]=1;var o=Object.keys(a),r=0,s=null;for(i=0;i<o.length;++i)a[n=o[i]]>r&&(s=parseInt(n,10),r=a[n]);return s}function w(t,e){if(e=e||{},"string"!=typeof t)throw"Invalid imageURL";this.colormap=e.colormap||[[255,255,255],[255,0,0]],this.boundaryColor=e.boundaryColor||[255,255,255],this.boundaryAlpha=e.boundaryAlpha||127,this.visualizationAlpha=e.visualizationAlpha||144,this.highlightAlpha=e.highlightAlpha||Math.min(255,this.visualizationAlpha+128),this.currentZoom=1,this.defaultLabel=e.defaultLabel||0,this.maxHistoryRecord=e.maxHistoryRecord||10,this.onchange=e.onchange||null,this.onrightclick=e.onrightclick||null,this.onleftclick=e.onleftclick||null,this.onhighlight=e.onhighlight||null,this.onmousemove=e.onmousemove||null,this._createLayers(e),this._initializeHistory(e),this._createLayers(e),this._initializeHistory(e),this.mode="superpixel",this.polygonPoints=[],this.prevAnnotationImg=null;var i=this;this.layers.image.load(t,{width:e.width,height:e.height,onload:function(){i._initialize(e)},onerror:e.onerror})}function x(t,e){return t[e]|t[e+1]<<8|t[e+2]<<16}function C(t,e,i){t[e+0]=255&i,t[e+1]=i>>>8&255,t[e+2]=i>>>16&255,t[e+3]=255}v.create=function(t,e){if((e=e||{}).method=e.method||"slic",!v[e.method])throw"Invalid method: "+e.method;return new v[e.method](t,e)},y.prototype.get=function(t){for(var e=[],i=0;i<this.neighbors.length;++i){var n=this.maps[i][t];n>=0&&e.push(n)}return e},w.prototype.resetSuperpixels=function(t){return t=t||{},this.layers.superpixel.copy(this.layers.image),this.segmentation=v.create(this.layers.image.imageData,t),this._updateSuperpixels(t),this},w.prototype.finer=function(t){return this.segmentation.finer(),this._updateSuperpixels(t),this},w.prototype.coarser=function(t){return this.segmentation.coarser(),this._updateSuperpixels(t),this},w.prototype.undo=function(){if(this.currentHistoryRecord<0)return!1;var t=this.history[this.currentHistoryRecord--];return this._fillPixels(t.pixels,t.prev),this.layers.visualization.render(),"function"==typeof this.onchange&&this.onchange.call(this),this.currentHistoryRecord<0},w.prototype.redo=function(){if(this.currentHistoryRecord>=this.history.length-1)return!1;var t=this.history[++this.currentHistoryRecord];return this._fillPixels(t.pixels,t.next),this.layers.visualization.render(),"function"==typeof this.onchange&&this.onchange.call(this),this.currentHistoryRecord>=this.history.length},w.prototype.getUniqueLabels=function(){for(var t=[],e=this.layers.annotation.imageData.data,i=0;i<e.length;i+=4){var n=x(e,i);t.indexOf(n)<0&&t.push(n)}return t.sort(function(t,e){return t-e})},w.prototype.fill=function(t){for(var e=[],i=this.layers.annotation.imageData.data,n=0;n<i.length;n+=4){x(i,n)!==t&&void 0!==t||e.push(n)}return e.length>0&&this._updateAnnotation(e,this.currentLabel),this},w.prototype.setAlpha=function(t){return this.visualizationAlpha=Math.max(Math.min(t,255),0),this.layers.visualization.setAlpha(this.visualizationAlpha).render(),this},w.prototype.lessAlpha=function(t){return this.setAlpha(this.visualizationAlpha-20*(t||1))},w.prototype.moreAlpha=function(t){return this.setAlpha(this.visualizationAlpha+20*(t||1))},w.prototype.import=function(t,e){e=e||{};var i=this;return this.layers.annotation.load(t,{onload:function(){e.grayscale&&this.gray2index(),i.layers.visualization.copy(this).applyColormap(i.colormap).setAlpha(i.visualizationAlpha).render(),this.setAlpha(0).render(),this.history=[],this.currentHistoryRecord=-1,"function"==typeof e.onload&&e.onload.call(i),"function"==typeof i.onchange&&i.onchange.call(i)},onerror:e.onerror}),this},w.prototype.export=function(){this.layers.annotation.setAlpha(255),this.layers.annotation.render();var t=this.layers.annotation.canvas.toDataURL();return this.layers.annotation.setAlpha(0),this.layers.annotation.render(),t},w.prototype.show=function(t){return this.layers[t].canvas.style.display="inline-block",this},w.prototype.hide=function(t){return this.layers[t].canvas.style.display="none",this},w.prototype.highlightLabel=function(t){for(var e=[],i=this.layers.annotation.imageData.data,n=0;n<i.length;n+=4){x(i,n)===t&&e.push(n)}return this._updateHighlight(e),this},w.prototype.unhighlightLabel=function(){return this._updateHighlight(null),this},w.prototype.zoom=function(t){return this.currentZoom=Math.max(Math.min(t||1,10),1),this.innerContainer.style.zoom=this.currentZoom,this.innerContainer.style.MozTransform="scale("+this.currentZoom+")",this},w.prototype.zoomIn=function(t){return this.zoom(this.currentZoom+(t||.25))},w.prototype.zoomOut=function(t){return this.zoom(this.currentZoom-(t||.25))},w.prototype.denoise=function(){for(var t=function(t,e){for(var i=(e=e||{}).neighbors||[[-1,-1],[-1,0],[-1,1],[0,-1],[0,0],[0,1],[1,-1],[1,0],[1,1]],n=new Int32Array(t.data.length),a=new y(t.width,t.height,i),o=0;o<t.data.length;++o)n[o]=b(t.data,a.get(o));return{width:t.width,height:t.height,data:n}}(function(t){for(var e={width:t.width,height:t.height,data:new Int32Array(t.width*t.height)},i=0;i<t.data.length;++i){var n=4*i;e.data[i]=t.data[n+0]|t.data[n+1]<<8|t.data[n+2]<<16}return e}(this.layers.annotation.imageData)),e=new Int32Array(t.data.length),i=0;i<e.length;++i)e[i]=4*i;return this._updateAnnotation(e,t.data),this},w.prototype._createLayers=function(t){var e=t.onload;for(var i in delete t.onload,this.container=document.createElement("div"),this.container.classList.add("segment-annotator-outer-container"),this.innerContainer=document.createElement("div"),this.innerContainer.classList.add("segment-annotator-inner-container"),this.layers={image:new a(t),superpixel:new a(t),visualization:new a(t),boundary:new a(t),annotation:new a(t)},t.onload=e,this.layers){var n=this.layers[i].canvas;n.classList.add("segment-annotator-layer"),this.innerContainer.appendChild(n)}this.container.appendChild(this.innerContainer),this._resizeLayers(t)},w.prototype._resizeLayers=function(t){for(var e in this.width=t.width||this.layers.image.canvas.width,this.height=t.height||this.layers.image.canvas.height,this.layers)if("image"!==e){var i=this.layers[e].canvas;i.width=this.width,i.height=this.height}this.innerContainer.style.width=this.width+"px",this.innerContainer.style.height=this.height+"px",this.container.style.width=this.width+"px",this.container.style.height=this.height+"px"},w.prototype._initializeHistory=function(t){this.history=[],this.currentHistoryRecord=-1},w.prototype._initialize=function(t){(t=t||{}).width||this._resizeLayers(t),this._initializeAnnotationLayer(),this._initializeVisualizationLayer(),this._initializeEvents(),this.resetSuperpixels(t.superpixelOptions),"function"==typeof t.onload&&t.onload.call(this),"function"==typeof this.onchange&&this.onchange.call(this)},w.prototype._initializeEvents=function(){var t=this.layers.annotation.canvas,e={down:!1,button:0},i=this;function n(t){var n=i._getClickOffset(t),a=i.layers.superpixel.imageData.data,o=i.layers.annotation.imageData.data,r=x(a,n),s=i.pixelIndex[r],h=x(o,n);"superpixel"===i.mode&&i._updateHighlight(s),"function"==typeof i.onmousemove&&i.onmousemove.call(i,h),e.down&&(2==e.button&&"function"==typeof i.onrightclick?"polygon"===i.mode?i._emptyPolygonPoints():i.onrightclick.call(i,h):("brush"===i.mode&&0===t.button&&i.brush(i._getClickPos(t),i.currentLabel),0===t.button&&"polygon"===i.mode?(i._addPolygonPoint(t),i._checkLineIntersection()&&i._addPolygonToAnnotation()):"superpixel"===i.mode&&i._updateAnnotation(s,i.currentLabel),"function"==typeof i.onleftclick&&i.onleftclick.call(i,i.currentLabel)))}t.oncontextmenu=function(){return!1},t.addEventListener("mousemove",n),t.addEventListener("mouseup",n),t.addEventListener("mouseleave",function(){i._updateHighlight(null),"function"==typeof i.onmousemove&&i.onmousemove.call(i,null)}),t.addEventListener("mousedown",function(t){e.down=!0,e.button=t.button}),t.addEventListener("mousewheel",function(t){console.log("mousewheel")}),window.addEventListener("mouseup",function(){e.down=!1})},w.prototype._updateBoundaryLayer=function(){var t=this.layers.boundary;t.copy(this.layers.superpixel),t.computeEdgemap({foreground:this.boundaryColor.concat(this.boundaryAlpha),background:this.boundaryColor.concat(0)}),t.render()},w.prototype._initializeAnnotationLayer=function(){var t=this.layers.annotation;t.resize(this.width,this.height),this.currentLabel=this.defaultLabel,t.fill([this.defaultLabel,0,0,0]),t.render()},w.prototype._initializeVisualizationLayer=function(){var t=this.layers.visualization;t.resize(this.width,this.height);var e=this.colormap[this.defaultLabel].concat([this.visualizationAlpha]);t.fill(e),t.render()},w.prototype._updateSuperpixels=function(){var t=this;this.layers.superpixel.process(function(e){e.data.set(t.segmentation.result.data),t._createPixelIndex(t.segmentation.result.numSegments),t._updateBoundaryLayer(),this.setAlpha(0).render()})},w.prototype._createPixelIndex=function(t){var e,i=new Array(t),n=this.layers.superpixel.imageData.data;for(e=0;e<t;++e)i[e]=[];for(e=0;e<n.length;e+=4){i[n[e]|n[e+1]<<8|n[e+2]<<16].push(e)}this.currentPixels=null,this.pixelIndex=i},w.prototype._getClickOffset=function(t){var e=this._getClickPos(t),i=e[0];return 4*(e[1]*this.layers.visualization.canvas.width+i)},w.prototype._getClickPos=function(t){var e=this.container,i=e.getBoundingClientRect(),n=window,a=document.documentElement,o=i.left+(n.pageXOffset||a.scrollLeft)-(a.clientLeft||0),r=i.top+(n.pageYOffset||a.scrollTop)-(a.clientTop||0),s=Math.round((t.pageX-o+e.scrollLeft)*(e.offsetWidth/e.scrollWidth)),h=Math.round((t.pageY-r+e.scrollTop)*(e.offsetHeight/e.scrollHeight));return[s=Math.max(Math.min(s,this.layers.visualization.canvas.width-1),0),h=Math.max(Math.min(h,this.layers.visualization.canvas.height-1),0)]},w.prototype._addPolygonPoint=function(t){var e=this._getClickPos(t),i=e[0],n=e[1],a=this.layers.annotation.canvas,o=a.getContext("2d");0===this.polygonPoints.length&&(o.save(),this.prevAnnotationImg=o.getImageData(0,0,a.width,a.height)),o.fillStyle="#FA6900",o.strokeStyle="#000000",o.lineWidth=1,0===this.polygonPoints.length?(o.beginPath(),o.moveTo(i,n)):(o.lineTo(i,n),o.stroke()),this.polygonPoints.push(e)},w.prototype._emptyPolygonPoints=function(){var t=this.layers.annotation.canvas.getContext("2d");t.restore(),this.prevAnnotationImg&&t.putImageData(this.prevAnnotationImg,0,0),this.polygonPoints=[]},w.prototype._addPolygonToAnnotation=function(){var t,e,n=document.createElement("canvas");n.width=this.layers.annotation.canvas.width,n.height=this.layers.annotation.canvas.height;var a=n.getContext("2d");for(a.fillStyle="rgba(0, 0, 255, 255)",a.beginPath(),a.moveTo(this.polygonPoints[0][0],this.polygonPoints[0][1]),i=1;i<this.polygonPoints.length;++i)t=this.polygonPoints[i][0],e=this.polygonPoints[i][1],a.lineTo(t,e);a.lineTo(this.polygonPoints[0][0],this.polygonPoints[0][1]),a.closePath(),a.fill();var o=[0,0,255,255],r=a.getImageData(0,0,n.width,n.height),s=r.data,h=[];for(t=0;t<n.width;++t)for(e=0;e<n.height;++e){var l=4*(t+e*r.width);s[l+0]==o[0]&&s[l+1]==o[1]&&s[l+2]==o[2]&&s[l+3]==o[3]&&h.push(l)}this._updateAnnotation(h,this.currentLabel),this._emptyPolygonPoints()},w.prototype._checkLineIntersection=function(){if(this.polygonPoints.length<4)return!1;var t=this.polygonPoints[this.polygonPoints.length-2][0],e=this.polygonPoints[this.polygonPoints.length-2][1],n=this.polygonPoints[this.polygonPoints.length-1][0],a=this.polygonPoints[this.polygonPoints.length-1][1];for(i=1;i<this.polygonPoints.length-2;++i){var o=this.polygonPoints[i-1][0],r=this.polygonPoints[i-1][1],s=this.polygonPoints[i][0],h=this.polygonPoints[i][1],l=(a-e)*(s-o)-(n-t)*(h-r),d=r-e,c=o-t,p=(n-t)*d-(a-e)*c;if(c=((s-o)*d-(h-r)*c)/l,(d=p/l)>0&&d<1&&c>0&&c<1)return!0}return!1},w.prototype._setMode=function(t){this.mode=t},w.prototype._updateHighlight=function(t){var e,i,n,a=this.layers.visualization.imageData.data,o=this.layers.boundary.imageData.data,r=this.layers.annotation.imageData.data;if(null!==this.currentPixels)for(e=0;e<this.currentPixels.length;++e)n=this.currentPixels[e],(i=this.colormap[x(r,n)])&&(a[n+0]=i[0],a[n+1]=i[1],a[n+2]=i[2],a[n+3]=this.visualizationAlpha);if(this.currentPixels=t,null!==this.currentPixels)for(e=0;e<t.length;++e)o[(n=t[e])+3]?(a[n+0]=this.boundaryColor[0],a[n+1]=this.boundaryColor[1],a[n+2]=this.boundaryColor[2],a[n+3]=this.highlightAlpha):a[n+3]=this.highlightAlpha;this.layers.visualization.render(),this.layers.boundary.render(),"function"==typeof this.onhighlight&&this.onhighlight.call(this)},w.prototype._fillPixels=function(t,e){if(t.length!==e.length)throw"Invalid fill: "+t.length+" !== "+e.length;for(var i=this.layers.annotation.imageData.data,n=this.layers.visualization.imageData.data,a=0;a<t.length;++a){var o=t[a],r=e[a],s=this.colormap[r];C(i,o,r),n[o+0]=s[0],n[o+1]=s[1],n[o+2]=s[2]}},w.prototype._updateAnnotation=function(t,e){var i;return e="object"==typeof e?e:function(t,e){for(var i=0;i<t.length;++i)t[i]=e;return t}(new Int32Array(t.length),e),0===(i=this._getDifferentialUpdates(t,e)).pixels.length?this:(this._updateHistory(i),this._fillPixels(i.pixels,i.next),this.layers.visualization.render(),"function"==typeof this.onchange&&this.onchange.call(this),this)},w.prototype._getDifferentialUpdates=function(t,e){if(t.length!==e.length)throw"Invalid labels";for(var i=this.layers.annotation.imageData.data,n={pixels:[],prev:[],next:[]},a=0;a<t.length;++a){var o=x(i,t[a]);o!==e[a]&&(n.pixels.push(t[a]),n.prev.push(o),n.next.push(e[a]))}return n},w.prototype._updateHistory=function(t){this.history=this.history.slice(0,this.currentHistoryRecord+1),this.history.push(t),this.history.length>this.maxHistoryRecord?this.history=this.history.slice(1,this.history.length):++this.currentHistoryRecord};var M="";function L(t,e,i,n){var a=document.createElement("div"),o=function(t,e,i){var n=document.createElement("div"),a=document.createElement("div"),o=document.createElement("div"),r=document.createElement("span"),s=document.createElement("div"),h=document.createElement("div"),l=document.createElement("div"),d=document.createElement("span"),c=document.createElement("div"),p=document.createElement("div"),u=document.createElement("div");return a.appendChild(document.createTextNode("-")),a.classList.add("edit-image-top-button"),a.addEventListener("click",function(){i.zoomOut()}),o.appendChild(document.createTextNode("zoom +")),o.classList.add("edit-image-top-button"),o.addEventListener("click",function(){i.zoomIn()}),r.className="edit-image-top-spacer",h.id="boundary-button",h.className="edit-image-top-button",h.appendChild(document.createTextNode("boundary")),h.addEventListener("click",function(){A&&window.clearTimeout(A),h.classList.contains("edit-image-top-button-enabled")?i.hide("boundary"):i.show("boundary"),h.classList.toggle("edit-image-top-button-enabled")}),s.appendChild(document.createTextNode("-")),s.className="edit-image-top-button",s.addEventListener("click",function(){i.finer(),E()}),l.appendChild(document.createTextNode("+")),l.className="edit-image-top-button",l.addEventListener("click",function(){i.coarser(),E()}),d.className="edit-image-top-spacer",c.className="edit-image-top-button",c.appendChild(document.createTextNode("-")),c.addEventListener("click",function(){i.moreAlpha()}),p.className="edit-image-top-button edit-image-top-button-enabled",p.appendChild(document.createTextNode("image")),p.addEventListener("click",function(){p.classList.contains("edit-image-top-button-enabled")?i.hide("image"):i.show("image"),p.classList.toggle("edit-image-top-button-enabled")}),u.className="edit-image-top-button",u.appendChild(document.createTextNode("+")),u.addEventListener("click",function(){i.lessAlpha()}),n.className="edit-image-top-menu",n.appendChild(a),n.appendChild(o),n.appendChild(r),n.appendChild(s),n.appendChild(h),n.appendChild(l),n.appendChild(d),n.appendChild(c),n.appendChild(p),n.appendChild(u),n}(0,0,i),r=document.createElement("div"),s=document.createElement("div"),h=document.createElement("div"),l=function(t,e,i){var n=document.createElement("div"),a=function(t,e,i){var n=document.createElement("div");n.className="edit-sidebar-label-picker";for(var a=0;a<e.labelsContent.length;++a){var o=S(e,e.labelsContent[a],a,i);0===a&&(i.currentLabel=0,o.classList.add("edit-sidebar-button-selected")),n.appendChild(o)}return window.addEventListener("click",k,!0),n}(0,e,i),o=document.createElement("div"),r=document.createElement("div"),s=document.createElement("div"),h=document.createElement("div"),l=document.createElement("div"),d=document.createElement("div"),c=document.createElement("div"),p=document.createElement("div"),u=(document.createElement("div"),document.createElement("div")),m=(document.createElement("div"),document.createElement("p")),g=(document.createElement("div"),document.createElement("input"));return g.type="submit",g.value="export",g.className="edit-sidebar-submit",g.addEventListener("click",function(){e.annotationURLs?e.annotationURLs[t.id].split(/[\\\/]/).pop():t.id}),o.className="edit-sidebar-spacer",r.className="edit-sidebar-button",r.appendChild(document.createTextNode("后退一步")),r.addEventListener("click",function(){i.undo()}),s.className="edit-sidebar-button",s.appendChild(document.createTextNode("前进一步")),s.addEventListener("click",function(){i.redo()}),h.className="edit-sidebar-spacer",l.className="edit-sidebar-button",l.appendChild(document.createTextNode("降噪")),l.addEventListener("click",function(){i.denoise()}),c.className="edit-sidebar-button",c.appendChild(document.createTextNode("超像素工具")),c.addEventListener("click",function(){u.classList.remove("edit-sidebar-button-selected"),c.classList.add("edit-sidebar-button-selected"),i._setMode("superpixel")}),c.classList.add("edit-sidebar-button-selected"),u.classList.add("edit-sidebar-button-selected"),u.className="edit-sidebar-button",u.appendChild(document.createTextNode("刷子")),u.addEventListener("click",function(){c.classList.remove("edit-sidebar-button-selected"),u.classList.add("edit-sidebar-button-selected"),i._setMode("brush")}),d.className="edit-sidebar-spacer",m.appendChild(document.createTextNode("ctrl: toggle mode")),m.appendChild(document.createElement("br")),m.appendChild(document.createElement("br")),m.appendChild(document.createTextNode("+Superpixel tool:")),m.appendChild(document.createElement("br")),m.appendChild(document.createTextNode("left: mark")),m.appendChild(document.createElement("br")),m.appendChild(document.createTextNode("right: pick label")),m.appendChild(document.createElement("br")),m.appendChild(document.createElement("br")),m.appendChild(document.createTextNode("+Polygon tool:")),m.appendChild(document.createElement("br")),m.appendChild(document.createTextNode("left: draw line")),m.appendChild(document.createElement("br")),m.appendChild(document.createTextNode("right: abort")),p.className="edit-sidebar-spacer",n.className="edit-sidebar",n.appendChild(a),n.appendChild(o),n.appendChild(r),n.appendChild(s),n.appendChild(h),n.appendChild(l),n.appendChild(d),n.appendChild(c),n.appendChild(u),n.appendChild(g),n}(t,e,i),d=document.createElement("button"),c=document.createElement("input"),p=document.createElement("p");return r.className="edit-image-display",r.appendChild(o),r.appendChild(i.container),s.className="edit-image-top-menu",h.className="edit-image-display",h.appendChild(l),a.className="edit-main-container",a.id="AllMight",a.appendChild(r),a.appendChild(h),c.className="edit-size-input",d.className="edit-size-button",c.placeholder="更改块大小",d.innerText="更改",p.innerText="目前块大小"+M,a.appendChild(c),a.appendChild(d),a.appendChild(p),d.addEventListener("click",function(){var t={method:"slic",regionSize:c.value-0};i.resetSuperpixels(t)}),console.log(a),a}var A=null;function E(){var t=document.getElementById("boundary-button");A?(window.clearTimeout(A),A=window.setTimeout(function(){t.click(),A=null},1e3)):t.classList.contains("edit-image-top-button-enabled")||(t.click(),A=window.setTimeout(function(){t.click(),A=null},1e3))}function S(t,e,i,n){var a=document.createElement("span"),o=document.createElement("span"),r=document.createElement("div"),s=document.createElement("div"),h=document.createElement("div");return a.className="edit-sidebar-legend-colorbox",a.style.backgroundColor="rgb("+t.colormap[i].join(",")+")",o.appendChild(document.createTextNode(e)),o.className="edit-sidebar-legend-label",s.appendChild(document.createTextNode("+")),s.className="edit-sidebar-popup-trigger",s.addEventListener("click",function(){h.classList.toggle("edit-sidebar-popup-active")}),h.className="edit-sidebar-popup",h.appendChild(function(t,e,i,n){var a=document.createElement("select"),o=document.createElement("option");o.appendChild(document.createTextNode("Change to")),a.appendChild(o);for(var r=0;r<t.labelsContent.length;++r)if(r!==e){var s=document.createElement("option");s.value=r,s.appendChild(document.createTextNode(t.labelsContent[r])),a.appendChild(s)}return a.addEventListener("change",function(t){var a=e,r=parseInt(t.target.value,10);if(a!==r){var s=i.currentLabel;i.currentLabel=r,i.fill(a),i.currentLabel=s}n.classList.remove("edit-sidebar-popup-active"),o.selected=!0,t.preventDefault()}),a}(t,i,n,h)),h.addEventListener("click",function(t){t.preventDefault()}),r.appendChild(a),r.appendChild(o),r.appendChild(s),r.appendChild(h),r.id="label-"+i+"-button",r.className="edit-sidebar-button",r.addEventListener("click",function(){var t="edit-sidebar-button-selected";n.currentLabel=i;for(var e=document.getElementsByClassName(t),a=0;a<e.length;++a)e[a].classList.remove(t);r.classList.add(t)}),r.addEventListener("mouseenter",function(){document.getElementsByClassName("edit-sidebar-popup-active").length||n.highlightLabel(i)}),r.addEventListener("mouseleave",function(){document.getElementsByClassName("edit-sidebar-popup-active").length||n.unhighlightLabel()}),r}function I(t){for(var e="edit-sidebar-button-highlight",i=document.getElementsByClassName(e),n=0;n<i.length;++n)i[n].classList.remove(e);var a=document.getElementById("label-"+t+"-button");a&&a.classList.add(e)}function k(t){for(var e=!0,i=t.target;i.parentNode;)e=e&&!i.classList.contains("edit-sidebar-popup"),i=i.parentNode;if(e){var n=document.getElementsByClassName("edit-sidebar-popup-active");if(n.length)for(var a=0;a<n.length;++a)n[a].classList.remove("edit-sidebar-popup-active")}}w.prototype.brush=function(t,e){for(var i=[],n=[],a=-2;a<=2;a++)for(var o=-2;o<=2;o++)if(!(o*o+a*a>7)){var r=4*((t[1]+a)*this.layers.visualization.canvas.width+(t[0]+o));i.push(r),n.push(e)}this._updateAnnotation(i,n),this.layers.visualization.render(),"function"==typeof this.onchange&&this.onchange.call(this)};let _={id:0};window.getData={mode:2,formData:{groupLst:{propertyId:3,propertyStatus:"3",propertyType:2,propertyName:"标签",groupId:0,propertyValueLst:[{propertyValue:"skin",propertyLabel:"皮肤",boxColor:[226,196,196],boxColorOpacity:"1",fillColor:[202,255,112],fillColorOpacity:"0.2"},{propertyValue:"hair",propertyLabel:"头发",boxColor:[64,32,32],boxColorOpacity:"1",fillColor:[202,255,112],fillColorOpacity:"0.2"},{propertyValue:"dress",propertyLabel:"连衣裙",boxColor:[255,0,0],boxColorOpacity:"1",fillColor:[202,255,112],fillColorOpacity:"0.2"},{propertyValue:"glasses",propertyLabel:"眼睛",boxColor:[128,255,0],boxColorOpacity:"1",fillColor:[202,255,112],fillColorOpacity:"0.2"},{propertyValue:"jacket",propertyLabel:"上衣",boxColor:[0,255,255],boxColorOpacity:"1",fillColor:[202,255,112],fillColorOpacity:"0.2"},{propertyValue:"skirt",propertyLabel:"外衣",boxColor:[128,0,255],boxColorOpacity:"1",fillColor:[202,255,112],fillColorOpacity:"0.2"}]},propertyLst:[],foundationConfig:[]}};var z={labels:["background"],labelsContent:["背景"],imageURLs:[],annotationURLs:[],colormap:[[255,255,255]]};window.getData.formData.groupLst.propertyValueLst.forEach((t,e)=>{z.labels.push(t.propertyValue),z.labelsContent.push(t.propertyLabel),z.colormap.push(t.boxColor)});var N,D,B,P,F="";for(let t=0,e=z.colormap.length;t<e;t++)F+=(N=t,D=z.colormap[t],B=z.labelsContent[t],P=z.labels[t],`\n      <div class="superpixel_color_item" data-index="${N}">\n            <div class="superpixel_color_icon" style="background:rgb(${D.join(",")})"></div>\n            <div class="superpixel_color_cont" data-value="${P}">${B}</div>\n        </div>\n      `);document.getElementById("SuperpixelColor").innerHTML=F,window.Template={},window.Template.setTemplateData=function(t,e,i){t.baseImg&&z.annotationURLs.push(t.baseImg),z.imageURLs.push(e),function(t,e,i){t,e,M=i;var n=document.getElementById("AllMight");n&&n.parentNode.removeChild(n),i||(M=i=25);var o=parseInt(e.id,10);if(isNaN(o))throw"Invalid id";var r=new w(t.imageURLs[o],{width:e.width,height:e.height,colormap:t.colormap,superpixelOptions:{method:"slic",regionSize:i},onload:function(){t.annotationURLs&&r.import(t.annotationURLs[o]),r.hide("boundary")},onchange:function(){var t,e=this.getUniqueLabels(),i=document.getElementsByClassName("edit-sidebar-legend-label");for(t=0;t<i.length;++t)i[t].classList.remove("edit-sidebar-legend-label-active");for(t=0;t<e.length;++t)i[e[t]]&&i[e[t]].classList.add("edit-sidebar-legend-label-active")},onrightclick:function(t){document.getElementById("label-"+t+"-button").click()},onmousemove:I});function s(){document.getElementsByClassName("superpixel_regionSize")[0].innerHTML=r.segmentation.regionSize}new a(t.imageURLs[o],{width:e.width,height:e.height}),document.getElementById("SuperpixelContainer").appendChild(L(e,t,r)),console.log(r),window.Template.getMarkResult=function(){return{baseImg:r.export()}},document.getElementsByClassName("superpixel_regionSize")[0].innerHTML=i;var h=document.getElementsByClassName("superpixel_item");function l(){if(-1==this.className.indexOf("superpixel_active")){for(let t of h)t.classList.remove("superpixel_active");this.classList.add("superpixel_active")}}for(let t of h)t.addEventListener("click",l);var d=document.getElementsByClassName("superpixel_color_item");function c(){if(r.currentLabel=this.getAttribute("data-index"),-1==this.className.indexOf("superpixel_active")){for(let t of d)t.classList.remove("superpixel_active");this.classList.add("superpixel_active")}}for(let t of d)t.addEventListener("click",c),t.addEventListener("mouseenter",function(){let t=this.getAttribute("data-index")-0;r.highlightLabel(t)}),t.addEventListener("mouseleave",function(){r.unhighlightLabel()});document.getElementById("SurperpixelButton").onclick=function(){r._setMode("superpixel")},document.getElementById("BrushButton").onclick=function(){r._setMode("brush")},document.getElementById("BoundaryButton").onclick=function(){this.classList.toggle("boundary_show_hide")?r.hide("boundary"):r.show("boundary")},document.getElementById("ImageButton").onclick=function(){this.classList.toggle("image_show_hide")?r.hide("image"):r.show("image")},document.getElementById("BoundaryDecreaseButton").onclick=function(){r.finer(),-1!=this.className.indexOf("boundary_show_hide")?r.hide("boundary"):r.show("boundary"),s()},document.getElementById("BoundaryIncreaseButton").onclick=function(){r.coarser(),-1!=this.className.indexOf("boundary_show_hide")?r.hide("boundary"):r.show("boundary"),s()},document.getElementById("UndoButton").onclick=function(){r.undo()},document.getElementById("RedoButton").onclick=function(){r.redo()},document.getElementById("ImageDecreaseButton").onclick=function(){r.zoomOut()},document.getElementById("ImageIncreaseButton").onclick=function(){r.zoomIn()},document.getElementById("ImageAlphaDecreaseButton").onclick=function(){r.moreAlpha()},document.getElementById("ImageAlphaIncreaseButton").onclick=function(){r.lessAlpha()}}(z,_),i&&i()},window.Template.setTemplateData({baseImg:""},"data/images/4.png",function(){console.log("finish")})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,